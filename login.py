# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import time
from PyQt5.QtWidgets import QApplication, QMainWindow, QSplashScreen, QProgressBar, QLabel, QWidget
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import MySQLdb
import threading

class Splash(QSplashScreen):

    def __init__(self):
        super(Splash, self).__init__()
        message_font = QtGui.QFont()
        message_font.setBold(True)
        message_font.setPointSize(12)
        self.setFont(message_font)
        # 创建启动界面，支持png透明图片
        self.setPixmap(QtGui.QPixmap("./title.png"))
        self.show()
        # 淡入效果
        # self.setWindowOpacity(0)
        # t = 0
        # while t <= 50:
        #     newOpacity = self.windowOpacity() + 0.06
        #     if newOpacity > 1:
        #         break
        #     self.setWindowOpacity(newOpacity)
        #     self.show()
        #     t -= 1
        #     time.sleep(0.04)
        progressBar = QProgressBar(self)
        progressBar.setGeometry(0, self.pixmap().height() - 100, self.pixmap().width(), 15)
        progressBar.setTextVisible(False)
        progressBar.show()

        # 启动信息
        self.showMessage('加载配置文件...', alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignCenter, color=QtCore.Qt.white)

        # 加载配置文件
        # Database().loadConfigJson()
        for i in range(101):
            progressBar.setValue(i)
            if i == 41:
                thread1 = threading.Thread(target=self.loadModel())
                thread1.start()
            if i == 81:
                self.showMessage('加载系统配置...', alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignCenter,
                                 color=QtCore.Qt.white)
                time.sleep(0.03)
            time.sleep(0.05)

        self.showMessage("完成所有配置文件载入，请稍等...", alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignCenter,
                         color=QtCore.Qt.white)

        time.sleep(0.1)
        # 淡出效果
        t = 0
        while t <= 30:
            newOpacity = self.windowOpacity() - 0.02
            if newOpacity < 0:
                break
            self.setWindowOpacity(newOpacity)
            t += 1
            time.sleep(0.03)
        # 关闭启动画面
        # splash.close()

    def mousePressEvent(self, evt):
        pass
        # 重写鼠标点击事件，阻止点击后消失

    def mouseDoubleClickEvent(self, *args, **kwargs):
        pass
        # 重写鼠标双击事件，阻止出现卡顿现象

    def enterEvent(self, *args, **kwargs):
        pass
        # 重写鼠标移动事件，阻止出现卡顿现象

    def mouseMoveEvent(self, *args, **kwargs):
        pass
        # 重写鼠标移动事件，阻止出现卡顿现象

    def loadModel(self):
        from ui.utils.SingleModel import centernetModel, yoloModel, yolo_wsm

class Login(QWidget):
    infoEmit = QtCore.pyqtSignal(str, str)
    def __init__(self):
        super(Login,self).__init__()
        self.setupUi(self)

    def setupUi(self, QWidget):
        QWidget.resize(1000, 600)
        self.setMaximumSize(QtCore.QSize(1000, 600))
        self.setStyleSheet("")
        self.verticalLayout = QtWidgets.QVBoxLayout(QWidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(QWidget)
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 7, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 1, 2, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setMinimumSize(QtCore.QSize(0, 30))
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 30))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 1, 1, 2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 2, 3, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 2, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem4, 0, 2, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setMaximumSize(QtCore.QSize(300, 35))
        self.lineEdit.setObjectName("username")
        self.gridLayout.addWidget(self.lineEdit, 2, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setMaximumSize(QtCore.QSize(16777215, 80))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.lineEdit.setFont(font)
        self.label.setStyleSheet("color:rgb(255,255,255)")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 2, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setMaximumSize(QtCore.QSize(300, 35))
        self.lineEdit_2.setObjectName("password")
        self.gridLayout.addWidget(self.lineEdit_2, 4, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 80))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.lineEdit_2.setFont(font)
        self.label_2.setStyleSheet("color:rgb(255,255,255)")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 4, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setMinimumSize(QtCore.QSize(0, 30))
        self.label_4.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:rgb(255,255,255)")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 5, 1, 1, 2)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setMinimumSize(QtCore.QSize(200, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(240, 35))
        font = QtGui.QFont()
        font.setFamily("3ds")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(0, 150, 250);color:rgb(255,255,255)")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 6, 1, 1, 2, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addWidget(self.widget)

        self.retranslateUi(QWidget)
        self.pushButton.clicked.connect(self.login)

    def retranslateUi(self, QWidget):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "用户登录"))
        self.label.setText(_translate("Form", "用户名："))
        self.label_2.setText(_translate("Form", "密  码："))
        self.pushButton.setText(_translate("Form", "登  录"))

        QtCore.QMetaObject.connectSlotsByName(self)

    def paintEvent(self, event):
        painter = QPainter(self)
        pixmap = QPixmap("./login.png")
        painter.drawPixmap(self.rect(), pixmap)

    def login(self):
        self.db = MySQLdb.connect(host='localhost', user='root', password ='991010', db='test')
        self.cur = self.db.cursor()


        username = self.lineEdit.text()
        password = self.lineEdit_2.text()

        if username == "":
            self.label_4.setText('请输入用户名！')
            return
        if password == "":
            self.label_4.setText('请输入密码！')
            return

        sql = ''' SELECT * FROM users'''

        self.cur.execute(sql)
        self.db.close()
        data = self.cur.fetchall()
        for row in data:
            if username == row[1] and password == row[3]:
                print('user match')
                self.infoEmit.emit("L", username)
                # mainwindow = QMainWindow()
                # ui = testwindow.Ui_mainWindow(username)
                # ui.setupUi(mainwindow)
                mainwindow.show()
                self.close()
            else:
                self.label_4.setText('用户名或密码错误！')

if __name__ == '__main__':
    app = QApplication(sys.argv)

    # 启动页面
    splash = Splash()
    # 设置进程，启动加载页面时可以进行其他操作而不会卡死
    app.processEvents()

    #登录页面
    window = Login()
    from ui import testwindow
    mainwindow = QMainWindow()
    ui = testwindow.Ui_mainWindow()
    #将登录的用户名信息传递给主界面
    window.infoEmit.connect(ui._infoEmitEvent)
    ui.setupUi(mainwindow)

    window.show()
    splash.finish(mainwindow)
    splash.deleteLater()
    app.exec_()